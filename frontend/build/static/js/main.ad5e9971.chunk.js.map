{"version":3,"sources":["components/UserService/Login.js","App.js","reportWebVitals.js","index.js"],"names":["Login","React","createElement","className","action","type","placeholder","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"2HAEaA,EAAQ,WACjB,OACIC,IAAAC,cAAA,OAAKC,UAAU,aACXF,IAAAC,cAAA,WACID,IAAAC,cAAA,QAAME,OAAO,IACTH,IAAAC,cAAA,OAAKC,UAAU,IACXF,IAAAC,cAAA,SAAOG,KAAK,QAAQC,YAAY,iBAEpCL,IAAAC,cAAA,OAAKC,UAAU,IACXF,IAAAC,cAAA,SAAOG,KAAK,WAAWC,YAAY,oBAEvCL,IAAAC,cAAA,UAAQC,UAAU,eAAc,SAChCF,IAAAC,cAAA,UACAD,IAAAC,cAAA,UAAQC,UAAU,kBAAiB,gCCHxCI,MATf,WACI,OACIN,IAAAC,cAAA,WACID,IAAAC,cAACF,EAAK,QCMHQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,aCFDY,EAASC,WAAWC,SAASC,eAAe,SACpDC,OACDxB,IAAAC,cAACD,IAAMyB,WAAU,KACbzB,IAAAC,cAACK,EAAG,QAGZC","file":"static/js/main.ad5e9971.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Login = () => {\n    return (\n        <div className='loginPage'>\n            <div>\n                <form action=\"\">\n                    <div className=''>\n                        <input type='email' placeholder='Enter Email'/>\n                    </div>\n                    <div className=''>\n                        <input type='password' placeholder='Enter Passowrd'/>\n                    </div>\n                    <button className='loginButton'>Login</button>\n                    <p></p>\n                    <button className='registerDirect'>New user? Create Account</button>\n                </form>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport {Login} from './components/UserService/Login';\n\nfunction App() {\n    return (\n        <div>\n            <Login />\n\n        </div>\n    )\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n);\nreportWebVitals();\n\n/*\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    // Function to get questions from local storage\n    function getQuestionsFromLocalStorage() {\n        const storedQuestions = localStorage.getItem(\"questions\");\n        return storedQuestions ? JSON.parse(storedQuestions) : [];\n    }\n\n    // Function to save questions to local storage\n    function saveQuestionsToLocalStorage(questions) {\n        localStorage.setItem(\"questions\", JSON.stringify(questions));\n    }\n\n    // Function to display questions in the table\n    function displayQuestions() {\n        const questionTableBody = document.querySelector(\"table tbody\");\n        questionTableBody.innerHTML = \"\";\n\n        const questions = getQuestionsFromLocalStorage();\n\n        questions.forEach((question, index) => {\n            const row = document.createElement(\"tr\");\n            row.innerHTML = `\n            <td class=\"question-id\">${index + 1}</td>\n            <td class=\"question-title\">${question.title}</td>\n            <td>${question.complexity}</td>\n            <td>${question.category}</td>\n            <td><button class=\"delete-button\" data-index=\"${index + 1}\">Delete</button></td> <!-- Add data-index attribute -->\n            `;\n\n            // Add an id to each row for easier manipulation\n            // row.setAttribute(\"id\", `question-row-${index}`);\n\n            // Add a click event listener to the row\n            row.addEventListener(\"click\", function () {\n                displayQuestionDetails(question); // Call function to display details\n            });\n\n            // Add a click event listener to the delete button\n            row.querySelector(\".delete-button\").addEventListener(\"click\", function () {\n                deleteQuestion(index); // Call function to delete question\n            });\n\n            questionTableBody.appendChild(row);\n        });\n    }\n\n\n    // Function to delete a question\n    function deleteQuestion(index) {\n        const questions = getQuestionsFromLocalStorage();\n\n    if (index >= 0 && index < questions.length) {\n        const confirmationModal = document.getElementById(\"confirmationModal\");\n        const confirmDeleteButton = document.getElementById(\"confirmDeleteButton\");\n        const cancelDeleteButton = document.getElementById(\"cancelDeleteButton\");\n\n        // Show the confirmation modal\n        confirmationModal.style.display = \"block\";\n\n        // Handle the \"Yes\" button click\n        confirmDeleteButton.onclick = function () {\n            // Remove the question at the specified index\n            questions.splice(index, 1);\n\n            // Update the IDs of the remaining questions\n            for (let i = index; i < questions.length; i++) {\n                questions[i].id = i + 1;\n            }\n\n            // Save the updated questions to local storage\n            saveQuestionsToLocalStorage(questions);\n\n            // Refresh the question list\n            displayQuestions();\n\n            // Close the confirmation modal\n            confirmationModal.style.display = \"none\";\n        };\n\n        // Handle the \"No\" button click\n        cancelDeleteButton.onclick = function () {\n            // Close the confirmation modal without deleting the question\n            confirmationModal.style.display = \"none\";\n        };\n    }\n    }\n\n    // Function to display question details\n    function displayQuestionDetails(question) {\n        const detailsContainer = document.querySelector(\".question-details\");\n\n        // Replace newline characters with <br> tags and preserve indentation\n        const descriptionHTML = question.description.replace(/\\n/g, '<br>').replace(/ /g, '&nbsp;');\n    \n        // Create a template for displaying question details\n        const detailsHTML = `\n            <h2>${question.id}. ${question.title}</h2>\n            <p><strong>Description:</strong><br>${descriptionHTML}</p>\n            <p><strong>Complexity:</strong> ${question.complexity}</p>\n            <p><strong>Category:</strong> ${question.category}</p>\n        `;\n\n        detailsContainer.innerHTML = detailsHTML;\n}\n\n    // Function to check if a question with the same title already exists\n    function isDuplicateQuestion(title, questions) {\n        return questions.some((question) => question.title === title);\n    }\n\n    // Handle form submission to add a new question\n    const addQuestionForm = document.getElementById(\"questionForm\");\n    addQuestionForm.addEventListener(\"submit\", function (e) {\n        e.preventDefault();\n\n        // Retrieve form values\n        // const id = document.getElementById(\"question\").value;\n        const title = document.getElementById(\"questionTitle\").value;\n        const description = document.getElementById(\"questionDescription\").value;\n        const category = document.getElementById(\"questionCategory\").value;\n        const complexity = document.querySelector(\"select[name='questionComplexity']\").value;\n\n        // Check if the title is empty or contains only whitespace\n        if (title.trim() === \"\") {\n            alert(\"Title cannot be empty.\");\n            return; // Exit the function without adding the question\n        }\n\n        // Get the existing questions from local storage\n        const questions = getQuestionsFromLocalStorage();\n\n        // Check if a question with the same title already exists\n        if (isDuplicateQuestion(title, questions)) {\n            alert(\"A question with the same title already exists. Please enter a unique title.\");\n            return; // Exit the function without adding the question\n        }\n\n        // Create a new question object\n        const newQuestion = {\n            id: questions.length + 1, // Assign the next available ID\n            title,\n            description,\n            category,\n            complexity,\n        };\n\n        // Add the new question to the existing questions\n        questions.push(newQuestion);\n\n        // Save the updated questions to local storage\n        saveQuestionsToLocalStorage(questions);\n\n        // Clear form fields\n        addQuestionForm.reset();\n\n        // Refresh the question list\n        displayQuestions();\n    });\n\n    // Clear all questions from local storage\n    const clearAllButton = document.getElementById(\"clearAllButton\");\n    clearAllButton.addEventListener(\"click\", function () {\n        localStorage.removeItem(\"questions\");\n        // Clear the content of the question details container\n        const questionDetailsContainer = document.getElementById(\"questionDetailsContainer\");\n        questionDetailsContainer.innerHTML = \"\";\n        \n        // Refresh the question list\n        displayQuestions();\n    });\n\n    // // Function to display questions from local storage in the table\n    // function displayQuestionsFromLocalStorage() {\n    //     const questionTableBody = document.getElementById(\"questionTableBody\");\n    //     questionTableBody.innerHTML = \"\";\n    //     const questions = getQuestionsFromLocalStorage(); \n    //     questions.forEach((question, index) => {\n    //         const row = document.createElement(\"tr\");\n    //         row.innerHTML = `\n    //             <td>${question.id}</td>\n    //             <td>${question.title}</td>\n    //             <td>${question.complexity}</td>\n    //             <td>${question.category}</td>\n    //         `;\n\n    //         questionTableBody.appendChild(row);\n    //     });\n    // }\n\n    // Button to check local storage content\n    const checkLocalStorageButton = document.getElementById(\"checkLocalStorageButton\");\n    checkLocalStorageButton.addEventListener(\"click\", function () {\n        const content = localStorage.getItem(\"questions\");\n        if (content) {\n            console.log(JSON.parse(content));\n        } else {\n            console.log(\"Local storage is empty.\");\n        }\n        // displayQuestionsFromLocalStorage();\n    });\n\n    // Display initial list of questions\n    displayQuestions();\n});*/\n"],"sourceRoot":""}